use "std/assert";

fn FuncCreateInvokeTest() {
	var f1 = fn (int x) : int => { return x + 100; };
	var f2 = fn (int x, int y) : int => { return x + y; };
	var f3 = fn (String str) : String => { return str.Concat("World!"); };
	var f4 = fn (char c) => { AssertEq('X', c); };

	AssertEq(103, f1(3));
	AssertEq(140, f2(70, 70));
	AssertEq(true, "Hello World!" == f3("Hello "));
	f4('X');
}

fn FuncWithFuncArg(fn : int f) {
	AssertEq(200, f());
}

fn FuncPassAsArgTest() {
	var f = fn : int => { return 100 + 100; };
	FuncWithFuncArg(f);
}

fn ReturnAnonymousFunc() : fn : int {
	return fn : int => { return 999; };
}

fn FuncReturnFuncTest() {
	var f = ReturnAnonymousFunc();
	AssertEq(999, f());
}

fn PassFuncDirectly(fn (float x, float y) arg) {
	arg(1.0, 1.0);
	arg(10.0, 10.0);
	arg(12.0, 12.0);
}

fn PassFuncDirectlyTest()  {
	PassFuncDirectly(fn (float x, float y) => { 
		AssertEq(x, y);
	});
}

fn AssignedFunc(int x) : int {
	return x;
}

fn AssignedFuncAsArg(fn (int x) : int f) {
	AssertEq(10, f(10));
}

fn FuncAssignTest() {
	var f = AssignedFunc;
	AssertEq(10, f(10));

	AssignedFuncAsArg(f);
	AssignedFuncAsArg(AssignedFunc);
}

fn ReturnNamedFunction() : fn(int x) : int {
	return AssignedFunc; 
}

fn ReturnNamedFunctionTest() {
	var f = ReturnNamedFunction();
	AssertEq(99, f(99));
}