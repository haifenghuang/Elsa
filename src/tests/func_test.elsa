import "std/assert";

func FuncCreateInvokeTest()
{
	var f1 = func (int x) : int => { return x + 100; };
	var f2 = func (int x, int y) : int => { return x + y; };
	var f3 = func (String str) : String => { return str.Concat("World!"); };
	var f4 = func (char c) => { AssertEq('X', c); };

	AssertEq(103, f1(3));
	AssertEq(140, f2(70, 70));
	AssertEq(true, "Hello World!" == f3("Hello "));
	f4('X');
}

func FuncWithFuncArg(func : int fn)
{
	AssertEq(200, fn());
}

func FuncPassAsArgTest()
{
	var f = func : int => { return 100 + 100; };
	FuncWithFuncArg(f);
}

func ReturnAnonymousFunc() : func : int
{
	return func : int => { return 999; };
}

func FuncReturnFuncTest()
{
	var f = ReturnAnonymousFunc();
	AssertEq(999, f());
}

func PassFuncDirectly(func (float x, float y) arg)
{
	arg(1.0, 1.0);
	arg(10.0, 10.0);
	arg(12.0, 12.0);
}

func PassFuncDirectlyTest() 
{
	PassFuncDirectly(func (float x, float y) => { 
		AssertEq(x, y);
	});
}

func AssignedFunc(int x) : int
{
	return x;
}

func AssignedFuncAsArg(func (int x) : int f)
{
	AssertEq(10, f(10));
}

func FuncAssignTest()
{
	var f = AssignedFunc;
	AssertEq(10, f(10));

	AssignedFuncAsArg(f);
	AssignedFuncAsArg(AssignedFunc);
}

func ReturnNamedFunction() : func(int x) : int
{
	return AssignedFunc; 
}

func ReturnNamedFunctionTest()
{
	var f = ReturnNamedFunction();
	AssertEq(99, f(99));
}