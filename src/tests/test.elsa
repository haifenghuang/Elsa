import "std/io";
import "std/assert";

import "tests/string_test";
import "tests/type_cast_test";
import "tests/array_test";
import "tests/struct_test";
import "tests/program2";

struct Vec2D
{
	int x;
	int y;
};

struct Player
{
	Vec2D position;
	int speed;
};

struct ArrayStruct
{
	Player[] players;
	int[] numbers;
};

func void ImportTest()
{
	var game = new Game;
	game.num_players = 5464;
	PrintLn(game.num_players);
}

func void ArrayLength()
{
	var array = new char[];
	PrintLn(array.Length());
	
	array.Push('H');
	PrintLn(array.Length());
	array.Push('e');
	PrintLn(array.Length());
	array.Push('l');
	PrintLn(array.Length());
	array.Push('l');
	PrintLn(array.Length());
	array.Push('o');
	PrintLn(array.Length());
	array.Push('!');
	PrintLn(array.Length());

	loop(var i = 0; i < array.Length(); i++)
	{
		Print(array[i]);
	}

	PrintLn('');
}

func void ExplicitTyping()
{
	int x = 0;
	float x2 = 0.0;
	char x3 = '0';
	bool x4 = true;
	Player p = new Player;
	p.speed = 1337;

	PrintLn(x);
	PrintLn(x2);
	PrintLn(x3);
	PrintLn(x4);
	PrintLn(p.speed);
}

func void Arrays()
{
	var x = new int[];
	x.Push(15);

	PrintLn(x.Pop());
	
	x.Push(878);
	x.Push(878);
	x.Push(878);
	
	x[0] = 16;
	x[1] = 17;
	x[2] = 18;
	
	var x1 = x[0];
	var x2 = x[1];
	var x3 = x[2];

	PrintLn(x1);
	PrintLn(x2);
	PrintLn(x3);

	var x4 = x.Pop();
	var x5 = x.Pop();
	var x6 = x.Pop();
	
	PrintLn(x6);
	PrintLn(x5);
	PrintLn(x4);

	// Array with structs
	var players = new Player[];
	var player = new Player;
	player.speed = 8989;
	player.position = new Vec2D;
	player.position.x = 5600;
	
	players.Push(player);

	var p1 = players[0];

	PrintLn(p1.speed);
	PrintLn(p1.position.x);
	PrintLn(p1.position.y);

	var p = players.Pop();
	var speed = p.speed;
	PrintLn(speed);
	PrintLn(p.position.x);
	PrintLn(p.position.y);
}

func void Loops()
{
	loop(var i = 1; i <= 100; i++)
	{
		PrintLn(i);
	}

	loop(var j = 100; j >= 1; j--)
	{
		PrintLn(j);
	}

	var x = true;
	loop(x)
	{
		PrintLn(881118);
		x = false;
	}
	
	var y = true;
	var c = 0;
	loop(y || x)
	{
		PrintLn(1513);

		if(c >= 10)
		{
			y = false;
		}

		c++;
	}
}

func void Postfix()
{
	var x = 20;
	x++;
	PrintLn(x);
	x--;
	x--;
	PrintLn(x);

	var player = new Player;
	player.speed = 9999;
	player.speed++;
	PrintLn(player.speed);

	player.position = new Vec2D;
	player.position.x = 56;

	player.position.x--;
	player.position.x--;
	
	PrintLn(player.position.x);
}

func void CondPrint()
{
	if(6 > 5 || false)
	{
		PrintLn(7000);
	}
	
	if(4 < 5 && false)
	{
		PrintLn(7001);
	}

	if(99 >= 99)
	{
		PrintLn(7002);
	}

	if(99 >= 100)
	{
		PrintLn(7003);
	}

	if(99 <= 100)
	{
		PrintLn(7004);
	}

	if(99 <= 99)
	{
		PrintLn(7005);
	}

	if(99 <= 200 &&  88 >= 99)
	{
		PrintLn(7006);
	}

	if(99 <= 200 ||  88 >= 99)
	{
		PrintLn(7007);
	}

	if(100 == 2)
	{
		PrintLn(8000);
	}

	if(100 != 2)
	{
		PrintLn(8001);
	}

	if(100 == 100)
	{
		PrintLn(8002);
	}

	if(100 != 100)
	{
		PrintLn(8003);
	}
}

func void PrintSum(int a, int b)
{
	PrintLn(a + b);
}

func void CondPrint2()
{
	if(false && false || false || true)
	{
		PrintLn(777);
	}

	if(false)
	{
		PrintLn(888);
	}
	else
	{
		PrintLn(999);
	}

	if(true)
	{
		PrintLn(1000);
	}
	else
	{
		PrintLn(2000);
	}
}

func int ReturnIntTest()
{
	return 2015;
}

func Player ReturnPlayerTest()
{
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;

	return player;
}

func char ReturnByArrIndexTest()
{
	var x = new ['A','B','C','!'];

	return x[3];
}

func int main(int dummy)
{
	AssertEq(2, 2);

	Postfix();
	CondPrint();
	CondPrint2();

	var assignTest = 1337;
	PrintLn(assignTest);
	assignTest = 1337 + 1000;
	PrintLn(assignTest);

	var x = 1 + 2 * 6;

	var arg = 100 + 300 * 10;
	PrintSum(100, arg);

	var y = 10;
	var z = 1230120839;
	var f = 10.89;
	var c = 'X';
	var b = false;

	var vec = new Vec2D;
	vec.x = 10;
	vec.y = 20;
	
	PrintLn(vec.x);
	PrintLn(vec.y);
	
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;
	
	PrintLn(player.position.x);
	PrintLn(player.speed);
	
	PrintLn(x);
	PrintLn(y);
	PrintLn(10);
	PrintLn(10);
	PrintLn(77);
	PrintLn(z);
	PrintLn(f);
	PrintLn(c);
	PrintLn(b);
	PrintLn(x + y);

	Loops();

	var retIntValue = ReturnIntTest();
	PrintLn(retIntValue);

	var retPlayerValue = ReturnPlayerTest();
	PrintLn(retPlayerValue.position.x);
	PrintLn(retPlayerValue.speed);

	Arrays();
	ExplicitTyping();
	ArrayLength();
	ImportTest();

	// Array tests
	ArrayInitialSizeParsingTest();
	ArrayAssignTest();
	ArrayInitializerListTest();
	ArrayPushPopTest();
	ArrayOfStructsTest();
	ArrayAsArgTest();
	ReturnArrayTest();

	// Struct tests
	NewStructTest();
	StructFieldsTest();
	StructReferenceEqualsTest();
	StructInitializerListTest();

	PrintLn(ReturnByArrIndexTest());

	// Type cast tests
	TypeCastTest();

	// String tests
	NewStringTest();
	StringArrayTest();
	StringEqualsTest();
	StringConcatTest();
	SubstringTest();

	return 0;
}