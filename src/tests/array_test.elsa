import "std/assert";

struct ArrayTest
{
	int IntField;
	float FloatField;
	char CharField;
	bool BoolField;
};

func ArrayInitialSizeParsingTest()
{
	var size = 100 + 100;
	var arr = new int[100];
	var arr2 = new int[size];
}

func ArrayAssignTest()
{
	var arr = new int[100];

	loop(var i = 0; i < 100; i++)
	{
		arr.Push(10);
	}

	loop(var ii = 0; ii < 100; ii++)
	{
		arr[ii] = ii;
	}

	loop(var iii = 0; iii < 100; iii++)
	{
		AssertEq(iii, arr[iii]);
	}
}

func ArrayPushPopTest()
{
	var arr = new int[];
	AssertEq(0, arr.Length());
	
	arr.Push(1);
	AssertEq(1, arr[0]);
	AssertEq(1, arr.Length());

	arr.Push(2);
	AssertEq(2, arr[1]);
	AssertEq(2, arr.Length());

	arr.Push(3);
	AssertEq(3, arr[2]);
	AssertEq(3, arr.Length());

	var p1 = arr.Pop();
	AssertEq(3, p1);
	AssertEq(2, arr.Length());

	var p2 = arr.Pop();
	AssertEq(2, p2);
	AssertEq(1, arr.Length());

	var p3 = arr.Pop();
	AssertEq(1, p3);
	AssertEq(0, arr.Length());
}

func ArrayInitializerListTest()
{
	var ints = new [1, 2, 3, 4, 5, 6];
	
	AssertEq(1, ints[0]);
	AssertEq(2, ints[1]);
	AssertEq(3, ints[2]);
	AssertEq(4, ints[3]);
	AssertEq(5, ints[4]);
	AssertEq(6, ints[5]);

	var floats = new [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0];
	
	AssertEq(1.0, floats[0]);
	AssertEq(2.0, floats[1]);
	AssertEq(3.0, floats[2]);
	AssertEq(4.0, floats[3]);
	AssertEq(5.0, floats[4]);
	AssertEq(6.0, floats[5]);
	AssertEq(7.0, floats[6]);
	AssertEq(8.0, floats[7]);
	AssertEq(9.0, floats[8]);

	var chars = new ['H', 'e', 'l', 'l', 'o', '!'];
	
	AssertEq('H', chars[0]);
	AssertEq('e', chars[1]);
	AssertEq('l', chars[2]);
	AssertEq('l', chars[3]);
	AssertEq('o', chars[4]);
	AssertEq('!', chars[5]);

	var at = new ArrayTest;

	var structs = new [at, at, at, at];

	AssertEq(at, structs[0]);
	AssertEq(at, structs[1]);
	AssertEq(at, structs[2]);
	AssertEq(at, structs[3]);
}

func ArrayOfStructsTest()
{
	var structs = new [new ArrayTest, new ArrayTest]
	AssertEq(2, structs.Length());

	structs.Push(new ArrayTest);
	AssertEq(3, structs.Length());

	var at = new ArrayTest;
	at.IntField = 10;
	at.FloatField = 10.0;
	at.CharField = '!';
	at.BoolField = true;

	structs.Push(at);
	AssertEq(4, structs.Length());

	AssertEq(0, structs[0].IntField);
	AssertEq(0.0, structs[0].FloatField);
	AssertEq('\0', structs[0].CharField);
	AssertEq(false, structs[0].BoolField);

	AssertEq(10, structs[3].IntField);
	AssertEq(10.0, structs[3].FloatField);
	AssertEq('!', structs[3].CharField);
	AssertEq(true, structs[3].BoolField);
}

func ArrayAsArg(int[] arr)
{
	AssertEq(4, arr.Length());
	
	loop(var i = 0; i < arr.Length(); i++)
	{
		AssertEq(i, arr[i]);
	}

	arr.Push(4);
	arr.Push(5);
	arr.Push(6);
}

func ArrayAsArgTest()
{
	var arr = new [ 0, 1, 2, 3 ];
	ArrayAsArg(arr);

	AssertEq(7, arr.Length());
	
	loop(var i = 0; i < arr.Length(); i++)
	{
		AssertEq(i, arr[i]);
	}
}

func ReturnArray() : float[]
{
	return new [ 1.0 , 2.0, 13.37 ];
}

func ReturnArrayTest()
{
	var floats = ReturnArray();
	AssertEq(1.0, floats[0]);
	AssertEq(2.0, floats[1]);
	AssertEq(13.37, floats[2]);
}