import "std/io";
import "tests/program2";

struct Vec2D
{
	int x;
	int y;
};

struct Player
{
	Vec2D position;
	int speed;
};

struct ArrayStruct
{
	Player[] players;
	int[] numbers;
};

func void array_struct_test()
{
	var as = new ArrayStruct;

	as.numbers = new int[];
	as.numbers.Push(787878);
	PrintLn(as.numbers.Length());
	PrintLn(as.numbers[0]);

	as.players = new Player[];
	var p = new Player;
	as.players.Push(p);
	as.players.Push(new Player);
	PrintLn(as.players.Length());
	PrintLn(as.players[0].speed);
	PrintLn(as.players[1].speed);

	p.speed = 34;

	PrintLn(as.players[0].speed);
	PrintLn(as.players[1].speed);
}

func void import_test()
{
	var game = new Game;
	game.num_players = 5464;
	PrintLn(game.num_players);
}

func void array_length()
{
	var array = new char[];
	PrintLn(array.Length());
	
	array.Push('H');
	PrintLn(array.Length());
	array.Push('e');
	PrintLn(array.Length());
	array.Push('l');
	PrintLn(array.Length());
	array.Push('l');
	PrintLn(array.Length());
	array.Push('o');
	PrintLn(array.Length());
	array.Push('!');
	PrintLn(array.Length());

	loop(var i = 0; i < array.Length(); i++)
	{
		Print(array[i]);
	}

	PrintLn('');
}

func void explicit_typing()
{
	int x = 0;
	float x2 = 0.0;
	char x3 = '0';
	bool x4 = true;
	Player p = new Player;
	p.speed = 1337;

	PrintLn(x);
	PrintLn(x2);
	PrintLn(x3);
	PrintLn(x4);
	PrintLn(p.speed);
}

func void arrays()
{
	var x = new int[];
	x.Push(15);

	PrintLn(x.Pop());
	
	x.Push(878);
	x.Push(878);
	x.Push(878);
	
	x[0] = 16;
	x[1] = 17;
	x[2] = 18;
	
	var x1 = x[0];
	var x2 = x[1];
	var x3 = x[2];

	PrintLn(x1);
	PrintLn(x2);
	PrintLn(x3);

	var x4 = x.Pop();
	var x5 = x.Pop();
	var x6 = x.Pop();
	
	PrintLn(x6);
	PrintLn(x5);
	PrintLn(x4);

	// Array with structs
	var players = new Player[];
	var player = new Player;
	player.speed = 8989;
	player.position = new Vec2D;
	player.position.x = 5600;
	
	players.Push(player);

	var p1 = players[0];

	PrintLn(p1.speed);
	PrintLn(p1.position.x);
	PrintLn(p1.position.y);

	var p = players.Pop();
	var speed = p.speed;
	PrintLn(speed);
	PrintLn(p.position.x);
	PrintLn(p.position.y);
}

func void loops()
{
	loop(var i = 1; i <= 100; i++)
	{
		PrintLn(i);
	}

	loop(var j = 100; j >= 1; j--)
	{
		PrintLn(j);
	}

	var x = true;
	loop(x)
	{
		PrintLn(881118);
		x = false;
	}
	
	var y = true;
	var c = 0;
	loop(y || x)
	{
		PrintLn(1513);

		if(c >= 10)
		{
			y = false;
		}

		c++;
	}
}

func void postfix()
{
	var x = 20;
	x++;
	PrintLn(x);
	x--;
	x--;
	PrintLn(x);

	var player = new Player;
	player.speed = 9999;
	player.speed++;
	PrintLn(player.speed);

	player.position = new Vec2D;
	player.position.x = 56;

	player.position.x--;
	player.position.x--;
	
	PrintLn(player.position.x);
}

func void cond_print()
{
	if(6 > 5 || false)
	{
		PrintLn(7000);
	}
	
	if(4 < 5 && false)
	{
		PrintLn(7001);
	}

	if(99 >= 99)
	{
		PrintLn(7002);
	}

	if(99 >= 100)
	{
		PrintLn(7003);
	}

	if(99 <= 100)
	{
		PrintLn(7004);
	}

	if(99 <= 99)
	{
		PrintLn(7005);
	}

	if(99 <= 200 &&  88 >= 99)
	{
		PrintLn(7006);
	}

	if(99 <= 200 ||  88 >= 99)
	{
		PrintLn(7007);
	}

	if(100 == 2)
	{
		PrintLn(8000);
	}

	if(100 != 2)
	{
		PrintLn(8001);
	}

	if(100 == 100)
	{
		PrintLn(8002);
	}

	if(100 != 100)
	{
		PrintLn(8003);
	}
}

func void print_sum(int a, int b)
{
	PrintLn(a + b);
}

func void cond_print2()
{
	if(false && false || false || true)
	{
		PrintLn(777);
	}

	if(false)
	{
		PrintLn(888);
	}
	else
	{
		PrintLn(999);
	}

	if(true)
	{
		PrintLn(1000);
	}
	else
	{
		PrintLn(2000);
	}
}

func int return_int_test()
{
	return 2015;
}

func Player return_player_test()
{
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;

	return player;
}

func int main(int dummy)
{
	postfix();
	cond_print();
	cond_print2();

	var assign_test = 1337;
	PrintLn(assign_test);
	assign_test = 1337 + 1000;
	PrintLn(assign_test);

	var x = 1 + 2 * 6;

	var arg = 100 + 300 * 10;
	print_sum(100, arg);

	var y = 10;
	var z = 1230120839;
	var f = 10.89;
	var c = 'X';
	var b = false;

	var vec = new Vec2D;
	vec.x = 10;
	vec.y = 20;
	
	PrintLn(vec.x);
	PrintLn(vec.y);
	
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;
	
	PrintLn(player.position.x);
	PrintLn(player.speed);
	
	PrintLn(x);
	PrintLn(y);
	PrintLn(10);
	PrintLn(10);
	PrintLn(77);
	PrintLn(z);
	PrintLn(f);
	PrintLn(c);
	PrintLn(b);
	PrintLn(x + y);

	loops();

	var ret_int_value = return_int_test();
	PrintLn(ret_int_value);

	var ret_player_value = return_player_test();
	PrintLn(ret_player_value.position.x);
	PrintLn(ret_player_value.speed);

	arrays();
	explicit_typing();
	array_length();
	import_test();
	array_struct_test();

	return 0;
}