use "std/io";
use "std/assert";

struct Color {
	byte R;
	byte G;
	byte B;
	byte A;
};

struct Bitmap
{
	byte[] data;
	int width;
	int height;

	fn GetPixel(int x, int y) : Color {
		var stride = 4;
		var base = stride * x * width + y * stride;
		return new Color { R: data[base], G: data[base + 1], B: data[base + 2], A: data[base + 3] };
	}
};

fn CreateBitmapFromBmp24(String path) : Bitmap {
	var f = OpenFile(path, FileMode::Read);
	
	var header = new byte[];

	// Read the 54 byte header
	var read = ReadFile(f, header, 54);
	
	// Assert we have a bmp file
	AssertEq(byte(0x42), header[0]);
	AssertEq(byte(0x4D), header[1]);

	// The size of the file in bytes
	var size = ToInt32(new [ header[2], header[3], header[4], header[5] ]);

	AssertEq(byte(0), header[6]); // Unused - must be zero
	AssertEq(byte(0), header[7]); // Unused - must be zero
	AssertEq(byte(0), header[8]); // Unused - must be zero
	AssertEq(byte(0), header[9]); // Unused - must be zero

	// Header Size - Must be at least 40
	var headerSize = ToInt32(new [ header[14], header[15], header[16], header[17] ]);

	// Image width in pixels
	var width = ToInt32(new [ header[18], header[19], header[20], header[21] ]);

	// Image height in pixels
	var height = ToInt32(new [ header[22], header[23], header[24], header[25] ]);

	// Skipping biPlanes -> index 26, 27

	// Bits per pixel - 1, 4, 8, 16, 24, or 32
	var bitCount = ToInt32(new [ header[28], header[29], byte(0), byte(0) ]);
	AssertEq(24, bitCount);

	// Compression type (0 = uncompressed)
	var compression = ToInt32(new [ header[30], header[31], header[32], header[33] ]);
	AssertEq(0, compression);

	// Skipping the rest of the header for now

	var bitMapData = new byte[(width * height) * 4];

	// Credit: http://stackoverflow.com/questions/9296059/read-pixel-value-in-bmp-file
	int rowPadded = (width * 3 + 3) & -4;
	var rowSize = width * 3;
	for(int i = 0; i < height; i++)
    {
		var row = new byte[rowPadded];
        ReadFile(f, row, rowPadded);
        for(int j = 0; j < rowSize; j = j +3)
        {
			var r = row[j + 2];
			var	g = row[j + 1];
			var	b = row[j];
	
            // Bmps store the data as bgr so we need to reverse the pixel order
            bitMapData.Push(r);
			bitMapData.Push(g);
			bitMapData.Push(b);
			bitMapData.Push(byte(0));
        }
    }

	CloseFile(f);

	return new Bitmap { data: bitMapData, width: width, height: height };
}
