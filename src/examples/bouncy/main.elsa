use "std/io";
use "std/window";
use "std/rectangle";
use "examples/bouncy/paddle";
use "examples/bouncy/ball";
use "examples/bouncy/brick";

fn main() {
	var windowWidth = 800;
	var windowHeight = 600;

	var w = CreateWindow("Bouncy", windowWidth, windowHeight);
	w.Open();

	var paddle = CreatePaddle(windowWidth / 2, windowHeight - 35, 200, 30);
	var ball = CreateBall(w, windowWidth / 2, windowHeight / 2, 30, 1, -2);

	var bricks = new Brick[20];
	var brickX = 3;
	var brickY = 0;
	var brickWidth = 75;
	var brickHeight = 30;
	var brickPadding = 5;
	for(var i = 0; i < 20; i++) {
		bricks.Push(CreateBrick(brickX, brickY, brickWidth, brickHeight));
		brickX = brickX + brickWidth + brickPadding;

		if(i == 9) {
			brickX = 3;
			PrintLn(brickY);
			brickY = brickY + brickHeight + brickPadding;
			PrintLn(brickY);
		}
	}

	var lastTime = GetTicks();
	var numFrames = 0;

	while(true) {
		w.Clear();

		paddle.Update(w);
		ball.Update(paddle);

		paddle.Render(w);
		ball.Render(w);

		for(var i = 0; i < bricks.Length(); i++) {
			bricks[i].HandleBallCollision(ball);
			bricks[i].Render(w);
		}

		var now = GetTicks();
		var deltaTime = now - lastTime;
		lastTime = now;

		var temp = float(now) / 1000.0;
		float avgFps = float(numFrames) / temp;
		if(avgFps > float(2000000)) {
			// The first couple of frames the elapsed time count is tiny and will spike the fps
			avgFps = 0.0;
		}

		//PrintLn(avgFps);

		numFrames = numFrames + 1;

		// Lock down the fps
		if(deltaTime < 16) {
			var sleepTime = 16 - deltaTime;
			Sleep(sleepTime);
		}

		w.Update();
	}
}