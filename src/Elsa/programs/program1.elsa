struct Vec2D
{
	int x;
	int y;
};

struct Player
{
	Vec2D position;
	int speed;
};

func void arrays()
{
	var x = new int[];
	x.Push(15);

	elsa.PrintLn(x.Pop());
	
	x.Push(878);
	x.Push(878);
	x.Push(878);
	
	x[0] = 16;
	x[1] = 17;
	x[2] = 18;
	
	var x1 = x.Pop();
	var x2 = x.Pop();
	var x3 = x.Pop();
	
	elsa.PrintLn(x3);
	elsa.PrintLn(x2);
	elsa.PrintLn(x1);

	// Array with structs
	var players = new Player[];
	var player = new Player;
	player.speed = 8989;
	player.position = new Vec2D;
	player.position.x = 5600;
	

	players.Push(player);
	var p = players.Pop();
	var speed = p.speed;
	elsa.PrintLn(speed);
	elsa.PrintLn(p.position.x);
	elsa.PrintLn(p.position.y);
}

func void loops()
{
	loop(var i = 1; i <= 100; i++)
	{
		elsa.PrintLn(i);
	}

	loop(var j = 100; j >= 1; j--)
	{
		elsa.PrintLn(j);
	}

	var x = true;
	loop(x)
	{
		elsa.PrintLn(881118);
		x = false;
	}
	
	var y = true;
	var c = 0;
	loop(y || x)
	{
		elsa.PrintLn(1513);

		if(c >= 10)
		{
			y = false;
		}

		c++;
	}
}

func void postfix()
{
	var x = 20;
	x++;
	elsa.PrintLn(x);
	x--;
	x--;
	elsa.PrintLn(x);

	var player = new Player;
	player.speed = 9999;
	player.speed++;
	elsa.PrintLn(player.speed);

	player.position = new Vec2D;
	player.position.x = 56;

	player.position.x--;
	player.position.x--;
	
	elsa.PrintLn(player.position.x);
}

func void cond_print()
{
	if(6 > 5 || false)
	{
		elsa.PrintLn(7000);
	}
	
	if(4 < 5 && false)
	{
		elsa.PrintLn(7001);
	}

	if(99 >= 99)
	{
		elsa.PrintLn(7002);
	}

	if(99 >= 100)
	{
		elsa.PrintLn(7003);
	}

	if(99 <= 100)
	{
		elsa.PrintLn(7004);
	}

	if(99 <= 99)
	{
		elsa.PrintLn(7005);
	}

	if(99 <= 200 &&  88 >= 99)
	{
		elsa.PrintLn(7006);
	}

	if(99 <= 200 ||  88 >= 99)
	{
		elsa.PrintLn(7007);
	}

	if(100 == 2)
	{
		elsa.PrintLn(8000);
	}

	if(100 != 2)
	{
		elsa.PrintLn(8001);
	}

	if(100 == 100)
	{
		elsa.PrintLn(8002);
	}

	if(100 != 100)
	{
		elsa.PrintLn(8003);
	}
}

func void print_sum(int a, int b)
{
	elsa.PrintLn(a + b);
}

func void cond_print2()
{
	if(false && false || false || true)
	{
		elsa.PrintLn(777);
	}

	if(false)
	{
		elsa.PrintLn(888);
	}
	else
	{
		elsa.PrintLn(999);
	}

	if(true)
	{
		elsa.PrintLn(1000);
	}
	else
	{
		elsa.PrintLn(2000);
	}
}

func int return_int_test()
{
	return 2015;
}

func Player return_player_test()
{
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;

	return player;
}

func int main(int dummy)
{
	postfix();
	cond_print();
	cond_print2();

	var assign_test = 1337;
	elsa.PrintLn(assign_test);
	assign_test = 1337 + 1000;
	elsa.PrintLn(assign_test);

	var x = 1 + 2 * 6;

	var arg = 100 + 300 * 10;
	print_sum(100, arg);

	var y = 10;
	var z = 1230120839;
	var f = 10.89;
	var c = 'X';
	var b = false;

	var vec = new Vec2D;
	vec.x = 10;
	vec.y = 20;
	
	elsa.PrintLn(vec.x);
	elsa.PrintLn(vec.y);
	
	var player = new Player;
	player.speed = 11;
	player.position = new Vec2D;
	player.position.x = 5600;
	
	elsa.PrintLn(player.position.x);
	elsa.PrintLn(player.speed);
	
	elsa.PrintLn(x);
	elsa.PrintLn(y);
	elsa.Print(10);
	elsa.Print(10);
	elsa.PrintLn(77);
	elsa.PrintLn(z);
	elsa.PrintLn(f);
	elsa.PrintLn(c);
	elsa.PrintLn(b);
	elsa.PrintLn(x + y);

	loops();

	var ret_int_value = return_int_test();
	elsa.PrintLn(ret_int_value);

	var ret_player_value = return_player_test();
	elsa.PrintLn(ret_player_value.position.x);
	elsa.PrintLn(ret_player_value.speed);

	arrays();

	return 0;
}